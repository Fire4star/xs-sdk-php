<?php
require_once dirname(__FILE__) . '/../../lib/XSIndex.class.php';

/**
 * Test class for XSIndex
 * Generated by PHPUnit on 2011-09-15 at 19:29:49.
 */
class XSIndexTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var XSIndex
	 */
	protected $object;
	protected static $data, $data_gbk;

	public static function setUpBeforeClass()
	{
		self::$data = array(
			'pid' => 1234,
			'subject' => "Hello, 测试标题",
			'message' => "您好，这儿是真正的测试内容\n另起一行用英文\n\nHello, the world!",
			'chrono' => time(),
		);
		self::$data_gbk = XS::convert(self::$data, 'GBK', 'UTF-8');
	}

	public static function tearDownAfterClass()
	{
		
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$xs = new XS(end($GLOBALS['fixIniData']));
		$this->object = $xs->index;
		$this->object->clean();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->object->clean();
		$this->object = null;
	}

	public function testClean()
	{
		$this->setExpectedException('XSException', '', CMD_ERR_NODB);
		$this->object->xs->search->getDbTotal();
	}

	public function testChange()
	{
		$search = $this->object->xs->search;		
		// without primary key
		try
		{
			$e = null;
			$doc = new XSDocument;
			$this->object->add($doc);			
		}
		catch (XSException $e)
		{			
		}
		$this->assertInstanceOf('XSException', $e);
		$this->assertEquals('Missing value of primarky key (FIELD:pid)', $e->getMessage());

		// Adding use default charset		
		$doc = new XSDocument(self::$data_gbk);
		$this->object->add($doc);
		
		// Adding use utf8 charset
		$doc = new XSDocument(self::$data, 'utf-8');
		$this->object->add($doc);
		$this->object->flushIndex();
		sleep(2);
		
		// test result
		$search->setCharset('utf-8');
		$this->assertEquals(2, $search->dbTotal);
		$this->assertEquals(2, $search->count('pid:1234'));
		$this->assertEquals(2, $search->count('subject:测试标题'));
		
		// test update
		$this->assertTrue($this->object->flushIndex()); // nothing to flush
		$doc->subject = 'none empty';
		$this->object->update($doc);
		$this->assertTrue($this->object->flushIndex());	// flushing
		$this->assertFalse($this->object->flushIndex()); // busy (false)
		sleep(2);
		$this->assertEquals(1, $search->reopen(true)->dbTotal);
		$this->assertEquals(1, $search->count('pid:1234'));
		$this->assertEquals(0, $search->count('subject:测试标题'));
		$this->assertEquals(1, $search->count('subject:none'));
		
		// test del by pid
		$doc->pid = 567;
		$this->object->add($doc);
		$doc->pid = 890;
		$this->object->add($doc);
		$this->object->flushIndex();
		sleep(2);
		$this->assertEquals(3, $search->reopen(true)->dbTotal);
		
		// del by pk
		$this->object->del(567);
		$this->object->del(array('1234'), 'pid');
		$this->object->flushIndex();
		sleep(2);
		$this->assertEquals(1, $search->reopen(true)->dbTotal);
		$this->assertEquals(0, $search->count('pid:1234'));
		$this->assertEquals(1, $search->count('pid:890'));
	}
	
	public function testRebuild()
	{
		$search = $this->object->xs->search;
		$doc = new XSDocument(self::$data_gbk);
		$this->object->add($doc);
		$this->object->add($doc);		
		$this->object->flushIndex();		
		sleep(2);
		$this->assertEquals(2, $search->reopen(true)->dbTotal);
		
		$this->object->beginRebuild();
		$this->object->add($doc);
		$this->assertEquals(2, $search->reopen(true)->dbTotal);
		$this->object->endRebuild();
		$this->object->flushIndex();
		sleep(2);
		$this->assertEquals(1, $search->reopen(true)->dbTotal);		
	}
}
